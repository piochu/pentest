#!/usr/bin/env python3
# -*- coding: utf-8 -*-
from bs4 import BeautifulSoup
from urllib.parse import urlparse
import urllib.request
import socket
import re
import argparse


def request(path):
    try:
        body = urllib.request.urlopen("http://www.bing.com/%s" % path)
    except:
        print("No connection to bing.com...")
        exit(1)
    return body


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-v", help="increase output verbosity", dest="v", action="store_true")
    parser.add_argument("ip", help="server IP address")
    args = parser.parse_args()

    ip = args.ip
    valid_domain = re.match(r'[a-zA-Z\d-]{,63}(\.[a-zA-Z\d-]{,63})*', ip)
    if valid_domain:
        ip = socket.gethostbyname(ip)
        print("%s is located under %s" % (args.ip, ip))

    valid_ip = re.match(r"\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b", ip)
    if not valid_ip:
        print("error: %s is not valid IP address." % ip)
        exit(1)


    print_verbose = print if args.v else lambda *a, **k: None

    print_verbose("Sending request: ip:%s..." % ip)

    body = request("search?q=ip:%s" % ip)
    soup = BeautifulSoup(body)
    results = soup.find("span", {"class": "sb_count"})
    if results:
        results_count = int(re.sub('[^0-9]', '', str(results)))
    else:
        print("No results for %s" % ip)
        exit(1)

    print_verbose("Records: %s, filtering..." % results_count)

    array = []
    domains = []
    count = 1

    while count < results_count:
        body = request("search?q=ip:%s&first=%s" % (ip, count))
        soup = BeautifulSoup(body)
        for link in soup.find_all('cite'):
            link = "http://" + re.sub('<[^<]+?>', '', str(link))
            link = urlparse(link).netloc
            domains.append(link)
        count += 10

    for domain in domains:
        print_verbose("Checking %s..." % domain)
        try:
            domain_ip = socket.gethostbyname(domain)
            if domain_ip == ip:
                array.append(domain)
                print_verbose("Domain %s rejected, %s !=  %s" % (domain, domain_ip, ip))
        except:
            print_verbose("Error while resolving %s " % domain)

    array = list(set(array))

    print_verbose("Domains under %s: %s" % (ip, len(array)))
    for domain in array:
        print(domain)

if __name__ == "__main__":
    main()
